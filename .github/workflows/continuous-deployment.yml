name: 'Continuous Deployment'

on:
  push:
    tags: 'v*'

jobs:
  release:
    name: 'Create Release'
    runs-on: ubuntu-latest
    steps:
      - name: 'Create Release'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
  
  package:
    name: 'Publish Container'
    needs: release
    runs-on: ubuntu-latest
    steps:
      # Setup working environment for Docker
      - uses: actions/checkout@v2
      - id: docker_meta
        uses: docker/metadata-action@v3
        with:
          images: ghcr.io/sn0wcrack/saucybot-discord
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
      - uses: docker/setup-qemu-action@v1
      - uses: docker/setup-buildx-action@v1
      - name: 'Cache Buildx Cache'
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: 'Login to Container Registry'
        uses: docker/login-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
          registry: ghcr.io
      - name: 'Build and Publish'
        uses: docker/build-push-action@v2
        with:
          push: true
          context: .
          file: ./Dockerfile
          tags: ${{ steps.docker_meta.outputs.tags }}
          labels: ${{ steps.docker_meta.outputs.labels }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
      - name: 'Move cache'
        run:
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
  
  deploy:
    name: 'Deploy'
    needs: package
    runs-on: ubuntu-latest
    environment: Production
    
    steps:
      - uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SSH_HOSTNAME }}
          username: ${{ secrets.SSH_USERNAME }}
          port: ${{ secrets.SSH_PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            ./update.sh
